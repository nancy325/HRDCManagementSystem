@using HRDCManagementSystem.Models.Admin
@model List<AdminRegistrationItemViewModel>
@{
    ViewData["Title"] = "Registrations";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">Training Registrations</h2>
        <a class="btn btn-secondary" href="@Url.Action("Dashboard", "Admin")">Back to Dashboard</a>
    </div>

    <div class="card mb-3">
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-4">
                    <label class="form-label">Training</label>
                    <select class="form-select" name="trainingId">
                        <option value="">All Trainings</option>
                        @if (ViewBag.TrainingOptions != null)
                        {
                            foreach (var t in ViewBag.TrainingOptions)
                            {
                                var selected = (ViewBag.TrainingId != null && (int)ViewBag.TrainingId == (int)t.TrainingSysID) ? "selected" : "";
                                <option value="@t.TrainingSysID" selected>@t.Title</option>
                            }
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Start Date</label>
                    <input type="date" class="form-control" name="startDate" value="@ViewBag.StartDate">
                </div>
                <div class="col-md-3">
                    <label class="form-label">End Date</label>
                    <input type="date" class="form-control" name="endDate" value="@ViewBag.EndDate">
                </div>
                <div class="col-md-2">
                    <label class="form-label">Status</label>
                    <select class="form-select" name="status">
                        <option value="">All</option>
                        <option value="pending" selected="@(ViewBag.Status == "pending")">Pending</option>
                        <option value="approved" selected="@(ViewBag.Status == "approved")">Approved</option>
                        <option value="rejected" selected="@(ViewBag.Status == "rejected")">Rejected</option>
                    </select>
                </div>
                <div class="col-12 d-flex gap-2">
                    <button type="submit" class="btn btn-primary">Apply Filters</button>
                    <a href="@Url.Action("Registrations", "Admin")" class="btn btn-outline-secondary">Reset</a>
                </div>
            </form>
        </div>
    </div>

    <div class="card">
        <div class="card-body">
            <div class="d-flex justify-content-end mb-3">
                <button type="button" id="approveAllBtn" class="btn btn-primary btn-sm" onclick="approveAllPending()">
                    <i class="bi bi-check2-all"></i> Approve All Pending
                </button>
            </div>
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle">
                    <thead>
                        <tr>
                            <th>Sr.No.</th>
                            <th>Training</th>
                            <th>Employee</th>
                            <th>Department</th>
                            <th>Registered On</th>
                            <th>Status</th>
                            <th class="text-end">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model != null && Model.Count > 0)
                        {
                            var i = 1;
                            foreach (var r in Model)
                            {
                                // Assume r.TrainingStatus is "Completed" if the training is completed
                                bool isTrainingCompleted = (r.TrainingStatus != null && r.TrainingStatus.ToLower() == "completed");
                                var statusText = r.Confirmation == null ? "pending" : (r.Confirmation == true ? "approved" : "rejected");
                                <tr data-reg-id="@r.TrainingRegSysID" data-is-completed="@isTrainingCompleted.ToString().ToLower()" data-status="@statusText">
                                    <td>@i</td>
                                    <td>@r.TrainingTitle</td>
                                    <td>@r.EmployeeName</td>
                                    <td>@r.Department</td>
                                    <td>@r.RegistrationDate.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>
                                        @if (r.Confirmation == true)
                                        {
                                            <span class="badge bg-success">Approved</span>
                                        }
                                        else if (r.Confirmation == null)
                                        {
                                            <span class="badge bg-warning text-dark">Pending</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-danger">Rejected</span>
                                        }
                                    </td>
                                    <td class="text-end">
                                        <div class="d-inline-flex gap-2">
                                            <form asp-action="Approve" asp-controller="TrainingRegistration" method="post" onsubmit="return handleApproveClick(this, @isTrainingCompleted.ToString().ToLower());">
                                                <input type="hidden" name="id" value="@r.TrainingRegSysID" />
                                                <input type="hidden" name="trainingId" value="@ViewBag.TrainingId" />
                                                <input type="hidden" name="startDate" value="@ViewBag.StartDate" />
                                                <input type="hidden" name="endDate" value="@ViewBag.EndDate" />
                                                <input type="hidden" name="status" value="@ViewBag.Status" />
                                                <button type="submit" class="btn btn-success btn-sm"
                                                    @(r.Confirmation == true || isTrainingCompleted ? "disabled" : null)
                                                    title="@(isTrainingCompleted ? "Training is completed. You cannot approve." : "")">
                                                    <i class="bi bi-check-circle"></i> Approve
                                                </button>
                                            </form>
                                            <form asp-action="Reject" asp-controller="TrainingRegistration" method="post" onsubmit="return handleRejectClick(@isTrainingCompleted.ToString().ToLower());">
                                                <input type="hidden" name="id" value="@r.TrainingRegSysID" />
                                                <input type="hidden" name="trainingId" value="@ViewBag.TrainingId" />
                                                <input type="hidden" name="startDate" value="@ViewBag.StartDate" />
                                                <input type="hidden" name="endDate" value="@ViewBag.EndDate" />
                                                <input type="hidden" name="status" value="@ViewBag.Status" />
                                                <button type="submit" class="btn btn-danger btn-sm"
                                                    @(r.Confirmation == false || isTrainingCompleted ? "disabled" : null)
                                                    title="@(isTrainingCompleted ? "Training is completed. You cannot reject." : "")">
                                                    <i class="bi bi-x-circle"></i> Reject
                                                </button>
                                            </form>
                                        </div>
                                        @if (isTrainingCompleted)
                                        {
                                            <div class="text-danger small mt-1">Training is completed. You cannot approve or reject.</div>
                                        }
                                    </td>
                                </tr>
                                i++;
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="7" class="text-center text-muted">No registrations found.</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Prevent form submission and show message if training is completed
        function handleApproveClick(form, isCompleted) {
            if (isCompleted) {
                alert("Training is completed. You cannot approve.");
                return false;
            }
            return true;
        }

        function handleRejectClick(isCompleted) {
            if (isCompleted) {
                alert("Training is completed. You cannot reject.");
                return false;
            }
            return true;
        }

        async function approveAllPending() {
            const btn = document.getElementById('approveAllBtn');
            if (!btn) return;

            // Collect all rows that are pending and not completed
            const rows = Array.from(document.querySelectorAll('tr[data-reg-id]'));
            const targets = rows.filter(r => r.getAttribute('data-is-completed') === 'false' && r.getAttribute('data-status') === 'pending');

            if (targets.length === 0) {
                alert('No pending registrations to approve.');
                return;
            }

            if (!confirm(`Approve all pending registrations (${targets.length})?`)) {
                return;
            }

            btn.disabled = true;
            btn.textContent = 'Approving...';

            let successCount = 0;
            let failedCount = 0;
            for (const row of targets) {
                const regId = parseInt(row.getAttribute('data-reg-id'));
                try {
                    const res = await fetch('/TrainingRegistration/HandleApproval', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ registrationId: regId, action: 'approve' })
                    });
                    const data = await res.json();
                    if (data && data.success) {
                        successCount++;
                    } else {
                        failedCount++;
                    }
                } catch (e) {
                    failedCount++;
                }
            }

            alert(`Approve All completed. Success: ${successCount}, Failed: ${failedCount}`);
            window.location.reload();
        }
    </script>
}
